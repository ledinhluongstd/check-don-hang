{"version":3,"sources":["serviceWorker.js","handleExcel.js","index.js"],"names":["Boolean","window","location","hostname","match","HandleExcel","props","_ImportExcelSended","event","a","fileObj","target","files","ExcelRenderer","err","resp","console","log","setState","colsSended","cols","rowsSended","rows","value","state","step","forceUpdate","_ImportExcelReceivedMoney","cowsReceivedMoney","rowsReceivedMoney","_handleExportExcel","table","wb","Excel","ws","addWorksheet","addRows","getRow","font","name","family","size","bold","i","length","j","getCell","String","fromCharCode","border","top","style","color","argb","left","bottom","right","xlsx","writeBuffer","then","data","blob","Blob","type","saveAs","dataTable","push","forEach","item","index","flag","itemRM","indexRM","_handleCheck","_handleDownload","setTimeout","prevProps","this","className","htmlFor","id","onChange","bind","display","onClick","Fragment","map","item1","ind1","key","item2","ind2","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9806ed79.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport * as Excel from \"exceljs\";\r\nimport { saveAs } from 'file-saver';\r\nimport { ExcelRenderer } from \"react-excel-renderer\";\r\n\r\nclass HandleExcel extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      step: 0,\r\n      table: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n  }\r\n\r\n  _ImportExcelSended = async (event) => {\r\n    let fileObj = event.target.files[0];\r\n    ExcelRenderer(fileObj, (err, resp) => {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        this.setState({\r\n          colsSended: resp.cols,\r\n          rowsSended: resp.rows\r\n        })\r\n      }\r\n    });\r\n    event.target.value = null;\r\n    this.state.step = 1\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _ImportExcelReceivedMoney = async (event) => {\r\n    let fileObj = event.target.files[0];\r\n    //just pass the fileObj as parameter\r\n    ExcelRenderer(fileObj, (err, resp) => {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        this.setState({\r\n          cowsReceivedMoney: resp.cols,\r\n          rowsReceivedMoney: resp.rows\r\n        })\r\n      }\r\n    });\r\n    event.target.value = null;\r\n    this.state.step = 2\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _handleExportExcel = async (table) => {\r\n    const wb = new Excel.Workbook();\r\n    const ws = wb.addWorksheet('DsBanGhi');\r\n\r\n    ws.addRows(table);\r\n\r\n    ws.getRow(1).font = { name: 'Times New Roman', family: 2, size: 10, bold: true };\r\n\r\n    for (let i = 0; i < table.length + 1; i++) {\r\n      for (let j = 0; j < 7; j++) {\r\n        ws.getCell(String.fromCharCode(65 + j) + (i + 1)).border = {\r\n          top: { style: 'thin', color: { argb: '00000000' } },\r\n          left: { style: 'thin', color: { argb: '00000000' } },\r\n          bottom: { style: 'thin', color: { argb: '00000000' } },\r\n          right: { style: 'thin', color: { argb: '00000000' } }\r\n        }\r\n      }\r\n    }\r\n\r\n    wb.xlsx.writeBuffer().then((data) => {\r\n      const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' });\r\n      saveAs(blob, 'ĐƠN CHƯA CÓ TIỀN.xlsx');\r\n    });\r\n  }\r\n\r\n  dataTable = () => {\r\n    let { rowsSended, rowsReceivedMoney } = this.state\r\n    let table = []\r\n    let row = [\"TÊN KHÁCH\", \"SỐ ĐT\", \"ĐỊA CHỈ\", \"SẢN PHẨM\", \"TIỀN\", \"LƯU Ý\", \"TỔNG TIỀN ĐI\"]\r\n    table.push(row)\r\n    rowsSended.forEach((item, index) => {\r\n      if (item.length > 0 && index > 0) {\r\n        let flag = false\r\n        rowsReceivedMoney.forEach((itemRM, indexRM) => {\r\n          let nameSended = item[0]\r\n          let nameRM = itemRM[4]\r\n          if (nameSended === nameRM) {\r\n            flag = true\r\n          }\r\n        })\r\n        if (flag === false) {\r\n          table.push(item)\r\n        }\r\n      }\r\n    })\r\n    return table\r\n  }\r\n\r\n  _handleCheck = async () => {\r\n    let table = this.dataTable()\r\n    this.state.table = table\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _handleDownload = async () => {\r\n    let table = this.dataTable()\r\n    setTimeout(() => {\r\n      this._handleExportExcel(table)\r\n    }, 500)\r\n  }\r\n\r\n  render() {\r\n    let { step, table } = this.state\r\n    return (\r\n      <div className='container'>\r\n        <div className=\"card-header\">\r\n          <button className='btn btn-sm'>\r\n            <span>\r\n              <label htmlFor=\"file-upload1\" className=\"btn btn-sm btn-outline-primary border-radius\">\r\n                <i className=\"fas fa-upload\"></i>Import đơn đã gửi\r\n                </label>\r\n              <input\r\n                id=\"file-upload1\"\r\n                className=\"btn btn-sm btn-outline-primary border-radius\"\r\n                type=\"file\"\r\n                value={this.state.value}\r\n                onChange={this._ImportExcelSended.bind(this)}\r\n                style={{ display: 'none' }}\r\n              />\r\n            </span>\r\n          </button>\r\n\r\n          <button className='btn btn-sm'>\r\n            <span>\r\n              <label htmlFor=\"file-upload2\" className=\"btn btn-sm btn-outline-primary border-radius\">\r\n                <i className=\"fas fa-upload\"></i>Import đơn đã có tiền\r\n                </label>\r\n              <input\r\n                id=\"file-upload2\"\r\n                className=\"btn btn-sm btn-outline-primary border-radius\"\r\n                type=\"file\"\r\n                value={this.state.value}\r\n                onChange={this._ImportExcelReceivedMoney.bind(this)}\r\n                style={{ display: 'none' }}\r\n              />\r\n            </span>\r\n          </button>\r\n\r\n          <button className='btn btn-sm' onClick={() => this._handleCheck()}>\r\n            <label className=\"btn btn-sm btn-outline-primary border-radius\">\r\n              Kiểm tra đơn chưa có tiền\r\n          </label>\r\n          </button>\r\n\r\n          <button className='btn btn-sm' onClick={() => this._handleDownload()}>\r\n            <label className=\"btn btn-sm btn-outline-primary border-radius\">\r\n              Tải file Excel\r\n          </label>\r\n          </button>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          {step >= 0 && <React.Fragment>1. Import đơn đã gửi<br /></React.Fragment>}\r\n          {step >= 1 && <React.Fragment>2. Import đơn đã có tiền<br /></React.Fragment>}\r\n          {step >= 2 && <React.Fragment>3. Kiểm tra danh sách đơn hoặc Xuất file excel đơn chưa có tiền</React.Fragment>}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n              {table.map((item1, ind1) => {\r\n                return (\r\n                  <tr key={ind1}>\r\n                    <td>{ind1}</td>\r\n                    {item1.map((item2, ind2) => {\r\n                      return <td key={ind2}>{item2}</td>\r\n                    })}\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default HandleExcel;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport HandleExcel from './handleExcel'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HandleExcel/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}